// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_URL")
  schemas = ["multi"]
}

enum Status {
  ACTIVE    @map("ativo")
  INACTIVE  @map("inativo")
  SUSPENDED @map("suspenso")
  DELETED   @map("excluído")
  @@schema("multi")
}

enum ProductType {
  SPACE      @map("espaço")
  EQUIPAMENT @map("equipamento")
  SERVICE    @map("serviço")
  @@schema("multi")
}

enum PaymentStatus {
  PENDING   @map("pendente")
  COMPLETED @map("completo")
  FAILED    @map("falhou")
  REFUNDED  @map("reembolsado")  
  @@schema("multi")
}

enum PaymentMethod {
  CREDIT_CARD @map("cartão de crédito")
  DEBIT_CARD  @map("cartão de débito")
  PIX         @map("pix")
  BANK_SLIP   @map("boleto bancário")  
  @@schema("multi")
}

enum RentStatus {
  PENDING   @map("pendente")
  CONFIRMED @map("confirmado")
  CANCELLED @map("cancelado")
  COMPLETED @map("completo")  
  @@schema("multi")
}

enum TypeAddress {
  USER @map("usuário")
  ENTERPRISE @map("empresa")
  SUBSIDIARY @map("filial")
  @@schema("multi")
}

model User {
  userId          String     @unique @id @default(uuid()) @db.Uuid
  name            String     @db.VarChar(255)
  phoneNumber     String     @db.VarChar(20)
  email           String     @db.VarChar(255)
  profileImageUrl String?   @db.VarChar(1000)
  password        String     @db.VarChar(255)
  cpf             String     @db.VarChar(255)
  birthDate       DateTime   @db.Date
  status          Status     @default(ACTIVE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  isEmailVerified Boolean    @default(false)
  isPhoneVerified Boolean    @default(false)

  userRoles UserRoles[]
  legalRepresentatives    LegalRepresentative[]
  CompanyAssociate CompanyAssociate[]
  Address Address?

  @@map("users")
  @@schema("multi")
}

model Role {
  id    Int @id @default(autoincrement()) @db.Integer
  name  String @db.VarChar(255)
  description String @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rolesPermissions RolesPermissions[]
  UserRoles UserRoles[]

  @@map("roles")
  @@schema("multi")
}

model Permissions {
  id            Int @id @default(autoincrement()) @db.Integer
  action        String @db.VarChar(50)
  resource   String @db.VarChar(50)
  description   String @db.VarChar(1000)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  rolesPermissions RolesPermissions[]

  @@map("permissions")
  @@schema("multi")
}

model RolesPermissions {
  roleId   Int
  role     Role  @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  permissionId Int
  permission Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([roleId, permissionId])
  @@map("roles_permissions")
  @@schema("multi")
}

model UserRoles {
  userId    String @db.Uuid
  user      User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  roleId    Int
  role      Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, roleId])
  @@map("user_roles")
  @@schema("multi")
}

model Enterprise {
  id                       String   @id @default(uuid()) @db.Uuid
  enterpriseEmail          String   @db.VarChar(50)
  enterpriseName           String   @db.VarChar(100)
  enterpriseDescription    String?  @db.VarChar(1000)
  enterpriseCnpj           String   @db.VarChar(20)
  microenterprise          Boolean
  enterpriseMission        String   @db.VarChar(255)
  enterprisePhone          String   @db.VarChar(20)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt
  status                   Status   @default(ACTIVE)

  legalRepresentatives    LegalRepresentative[]
  CompanyAssociate        CompanyAssociate[]
  Address Address?
  SubsidiaryCompany SubsidiaryCompany[]

  @@map("enterprises")  
  @@schema("multi")
  
}

model SubsidiaryCompany {
  id            String   @id @default(uuid()) @db.Uuid
  enterpriseId  String   @db.Uuid
  enterprise    Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Address Address?
   
   @@schema("multi")
}



model LegalRepresentative {
  enterpriseId           String @db.Uuid
  enterprise             Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  idRepresentative       String  @db.Uuid
  user                   User @relation(fields: [idRepresentative], references: [userId], onDelete: Cascade, onUpdate: Cascade)  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now()) @updatedAt

  @@map("legal_representatives")  
  @@schema("multi")
  @@id([enterpriseId, idRepresentative])
}

model CompanyAssociate {
  userId                String  @db.Uuid
  user                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userRegistration      String @db.VarChar(20)
  enterpriseId          String   @db.Uuid
  enterprise            Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  @@schema("multi")
  @@id([userId, enterpriseId])
  @@map("company_associates")
}

model Address{
  id              String   @id @default(uuid()) @db.Uuid
  typeAddress     TypeAddress
  userId          String?  @unique @db.Uuid
  user            User?    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  enterpriseId    String?  @unique @db.Uuid
  enterprise      Enterprise? @relation(fields: [enterpriseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subsidiaryId    String?  @unique @db.Uuid
  subsidiary      SubsidiaryCompany? @relation(fields: [subsidiaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  street          String   @db.VarChar(255)
  number          String   @db.VarChar(20)
  complement      String?  @db.VarChar(255)
  neighborhood    String   @db.VarChar(100)
  city            String   @db.VarChar(100)
  state           String   @db.VarChar(100)
  postalCode      String   @db.VarChar(20)
  country         String   @db.VarChar(100)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@schema("multi")
}

model Payment {
  id           String        @id @default(uuid()) @db.Uuid
  userId       String        @db.Uuid
  enterpriseId String?       @db.Uuid
  amount       Decimal       @db.Decimal(10, 2)
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt

  @@map("payments")  
  @@schema("multi")
}

model Product {
  id          String      @unique @id @default(uuid()) @db.Uuid
  userId      String      @unique @db.Uuid
  name        String      @db.VarChar(255)
  description String?     @db.VarChar(1000)
  availableDate String[]  @default([]) @db.VarChar(1000)
  type        ProductType
  price       Decimal     @db.Decimal(10, 2)
  imagesUrls  String[]    @default([]) @db.VarChar(1000)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt

  @@map("products")  
  @@schema("multi")
}

model rentService {
  id                 String        @unique @id @default(uuid()) @db.Uuid
  userId             String        @unique @db.Uuid
  productId          String        @unique @db.Uuid
  paymentId          String        @unique @db.Uuid
  serviceDescription String?       @db.VarChar(1000)
  startDate          DateTime      @db.Date
  endDate            DateTime      @db.Date
  statusOfService    RentStatus    @default(PENDING)
  statusOfPayment    PaymentStatus @default(PENDING)
  createdAt          DateTime      @default(now())  
  @@schema("multi")
}
