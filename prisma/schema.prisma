// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_URL")
  schemas = ["multi"]
}

enum Status {
  ACTIVE    @map("ativo")
  INACTIVE  @map("inativo")
  SUSPENDED @map("suspenso")
  DELETED   @map("excluído")
  @@schema("multi")
}

enum ProductType {
  SPACE      @map("espaço")
  EQUIPMENT @map("equipamento")
  SERVICE    @map("serviço")
  @@schema("multi")
}

enum PaymentStatus {
  PENDING   @map("pendente")
  COMPLETED @map("completo")
  FAILED    @map("falhou")
  REFUNDED  @map("reembolsado")  
  @@schema("multi")
}

enum PaymentMethod {
  CREDIT_CARD @map("cartão de crédito")
  DEBIT_CARD  @map("cartão de débito")
  PIX         @map("pix")
  BANK_SLIP   @map("boleto bancário")  
  @@schema("multi")
}

enum RentStatus {
  PENDING   @map("pendente")
  CONFIRMED @map("confirmado")
  CANCELLED @map("cancelado")
  COMPLETED @map("completo")  
  @@schema("multi")
}

enum AddressType {
  USER @map("usuário")
  ENTERPRISE @map("empresa")
  SUBSIDIARY @map("filial")
  @@schema("multi")
}
enum OwnerType {
  ENTERPRISE @map("empresa")
  SUBSIDIARY @map("filial")
  @@schema("multi")
}

enum chargingModel {
  POR_DIA @map("por dia")
  POR_HORA @map("por hora")
  AMBOS @map("ambos") // Para equipamentos que podem ser por hora ou dia

  @@schema("multi")
}


model User {
  userId          String     @unique @id @default(uuid()) @db.Uuid
  name            String     @db.VarChar(255)
  phoneNumber     String     @db.VarChar(20)
  email           String     @db.VarChar(255)
  profileImageUrl String?   @db.VarChar(1000)
  password        String     @db.VarChar(255)
  cpf             String     @db.VarChar(15)
  birthDate       DateTime   @db.Date
  status          Status     @default(ACTIVE)
  preferences     Int[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt

  isEmailVerified Boolean    @default(false)
  isPhoneVerified Boolean    @default(false)

  legalRepresentatives    LegalRepresentative[]
  CompanyAssociates CompanyAssociate[]
  Address Address?
  rents Rent[]
  Payment Payment[]
  userSystemRoles userSystemRole[]
  UserCompanyRole UserCompanyRole[]

  @@map("users")
  @@schema("multi")
}

model userSystemRole {
  userId String @db.Uuid
  role String @db.VarChar(50) @default("commonUser")
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, role])
  @@map("user_system_roles")
  @@schema("multi")
}

model UserCompanyRole {
  id        Int     @id @default(autoincrement())
  userId    String  @db.Uuid
  companyId String  @db.Uuid
  role      String  @db.VarChar(50) // ex: 'adminCompany'

  user      User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId, role])
  @@map("user_company_roles")
  @@schema("multi")
}

model Company {
  id                    String   @id @default(uuid()) @db.Uuid
  popularName           String   @db.VarChar(100)
  email                 String   @db.VarChar(50)
  cnpj                  String   @db.VarChar(18)
  phone                 String   @db.VarChar(20)        
  description           String?  @db.VarChar(1000)        
  legalName             String?  @db.VarChar(255)         
  isMicroenterprise     Boolean  @default(false)         
  status                Status   @default(ACTIVE)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt
  associateDiscountRate Decimal  @default(0.0) @db.Decimal(5, 4) 
  createdBy             String   @db.Uuid
  ownerType             OwnerType @default(ENTERPRISE)

  legalRepresentatives    LegalRepresentative[]
  CompanyAssociates       CompanyAssociate[]
  Address                 Address?
  subsidiaries            Subsidiary[]
  UserCompanyRole UserCompanyRole[]

  @@map("enterprises")  
  @@schema("multi")
}

model Subsidiary {
  id            String   @id @default(uuid()) @db.Uuid
  companyId    String   @db.Uuid
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String?  @db.VarChar(100) 
  email        String?  @db.VarChar(50)  
  phone        String?  @db.VarChar(20)  
  cnpj         String?  @unique @db.VarChar(18) 
  status       Status   @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String   @db.Uuid
  ownerType    OwnerType @default(SUBSIDIARY)

  Address Address?
   
   @@map("subsidiaries")
   @@schema("multi")
}


model LegalRepresentative {
  companyId String     @db.Uuid
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String     @db.Uuid 
  user         User       @relation(fields: [userId],references: [userId], onDelete: Cascade, onUpdate: Cascade)
  documentUrl           String? @db.VarChar(1000) 
  position            String? @db.VarChar(100)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("legal_representatives")  
  @@schema("multi")
  @@id([companyId, userId])
}

model CompanyAssociate {
  userId                String  @db.Uuid
  user                  User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userCpf               String @db.VarChar(15)  
  companyId             String   @db.Uuid
  company               Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentUrl           String? @db.VarChar(1000) 
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now()) @updatedAt

  @@schema("multi")
  @@id([userId, companyId])
  @@map("company_associates")
}

model Address{
  id              String   @id @default(uuid()) @db.Uuid
  typeAddress     AddressType
  street          String   @db.VarChar(255)
  number          String   @db.VarChar(20)
  complement      String?  @db.VarChar(255)
  neighborhood    String   @db.VarChar(100)
  city            String   @db.VarChar(100)
  state           String   @db.VarChar(100)
  zipCode         String   @db.VarChar(20)
  country         String   @db.VarChar(100)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  userId          String?  @unique @db.Uuid
  user            User?    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  companyId    String?  @unique @db.Uuid
  company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  subsidiaryId    String?  @unique @db.Uuid
  subsidiary      Subsidiary? @relation(fields: [subsidiaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@schema("multi")
  @@map("addresses")
}

model Payment {
  id           String        @id @default(uuid()) @db.Uuid
  userId       String        @db.Uuid 
  user         User          @relation(fields: [userId], references: [userId]) 
  rentId       String?       @unique @db.Uuid // Opcional, se o pagamento for para um aluguel específico
  rent         Rent?         @relation(fields: [rentId], references: [id])
  amount       Decimal       @db.Decimal(10, 2)
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  transactionId String?      @unique @db.VarChar(255) 
  paidAt       DateTime?     
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("payments")
  @@schema("multi")
}

model Product {
  id            String      @id @default(uuid()) @db.Uuid
  title         String      @db.VarChar(255) 
  description   String      @db.VarChar(300)
  ownerId       String      @db.Uuid 
  type          ProductType

  dailyPrice    Decimal?    @db.Decimal(10, 2)  // Preço por dia
  hourlyPrice   Decimal?    @db.Decimal(10, 2)  // Preço por hora

  chargingModel  chargingModel @default(POR_DIA)
  unity         String?     @db.VarChar(50) // UNIDADE
  category      String      @db.VarChar(500)
  imagesUrls    String[]    @default([])
  status        Status      @default(ACTIVE) 

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdBy     String      @db.Uuid

  rents                     Rent[]
  productAvailability       ProductAvailability[]
  ProductWeeklyAvailability ProductWeeklyAvailability[]

  spaceProduct              SpaceProduct?
  servicesProduct           ServicesProduct?
  equipamentProduct         EquipamentProduct?

  @@map("products")  
  @@schema("multi")
}

model ProductWeeklyAvailability{
  productId   String      @db.Uuid
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dayOfWeek   Int         // 0 = Domingo, 1 = Segunda, ..., 6 = Sábado
  startTime   String      @db.VarChar(5) // Formato HH:MM
  endTime     String      @db.VarChar(5) // Formato HH:MM
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@id([productId, dayOfWeek])
  @@map("product_weekly_availabilities")
  @@schema("multi")
}

model SpaceProduct{
  id            String      @id @default(uuid()) @db.Uuid
  productId     String      @unique @db.Uuid
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  capacity      Int        
  area          Float

  @@schema("multi")
  @@map("space_products")
}

model ServicesProduct{
  id                        String      @id @default(uuid()) @db.Uuid
  productId                 String      @unique @db.Uuid
  product                   Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  durationMinutes           Int? @db.Integer // Duração em minutos
  requirements              String?     @db.VarChar(500)
  
  @@schema("multi")
  @@map("services_products")

}

model EquipamentProduct{
  id             String      @id @default(uuid()) @db.Uuid
  productId      String      @unique @db.Uuid
  product        Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brand          String?     @db.VarChar(100)
  model          String?     @db.VarChar(100)
  specifications String?     @db.VarChar(1000)
  stock          Int         @default(0) 

  @@schema("multi")
  @@map("equipment_products")
}

model Rent {
  id              String        @id @default(uuid()) @db.Uuid
  userId          String        @db.Uuid 
  user            User          @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade) 
  productId       String        @db.Uuid 
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId       String?       @db.Uuid  @unique  
  payment         Payment?      @relation
  description     String?       @db.VarChar(1000) 
  startDate       DateTime      @db.Date
  endDate         DateTime      @db.Date
  totalAmount     Decimal       @db.Decimal(10, 2) 
  discountApplied Decimal       @db.Decimal(10, 2) @default(0.0)
  status          RentStatus    @default(PENDING) 
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt 


  @@map("rents") 
  @@schema("multi")
}

model ProductAvailability {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  isAvailable Boolean @default(true) // true se disponível, false se bloqueado
  priceOverride Decimal? @db.Decimal(10, 2) // Preço específico para este período, se diferente do basePrice
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_availabilities")
  @@schema("multi")
}